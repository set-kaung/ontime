// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const getNotifications = `-- name: GetNotifications :many
SELECT id, message, user_id, timestamp FROM notifications
WHERE user_id = $1
`

func (q *Queries) GetNotifications(ctx context.Context, userID string) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.UserID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :execresult
INSERT INTO notifications (message,user_id,timestamp)
VALUES ($1,$2,NOW())
`

type InsertNotificationParams struct {
	Message string `json:"message"`
	UserID  string `json:"user_id"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertNotification, arg.Message, arg.UserID)
}
