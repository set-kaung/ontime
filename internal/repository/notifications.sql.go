// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notifications.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgconn"
)

const getAllEventOfARequest = `-- name: GetAllEventOfARequest :many
SELECT e.type, e.target_id, e.created_at, e.id, e.description, n.action_user_id FROM events e
JOIN notification n
ON n.event_id = e.id
WHERE target_id = $1 AND type = 'request'
ORDER BY created_at DESC
`

type GetAllEventOfARequestRow struct {
	Type         string    `json:"type"`
	TargetID     int32     `json:"target_id"`
	CreatedAt    time.Time `json:"created_at"`
	ID           int64     `json:"id"`
	Description  string    `json:"description"`
	ActionUserID string    `json:"action_user_id"`
}

func (q *Queries) GetAllEventOfARequest(ctx context.Context, targetID int32) ([]GetAllEventOfARequestRow, error) {
	rows, err := q.db.Query(ctx, getAllEventOfARequest, targetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEventOfARequestRow
	for rows.Next() {
		var i GetAllEventOfARequestRow
		if err := rows.Scan(
			&i.Type,
			&i.TargetID,
			&i.CreatedAt,
			&i.ID,
			&i.Description,
			&i.ActionUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadnotificationCount = `-- name: GetUnreadnotificationCount :one
SELECT COUNT(n.id) FROM notification n
WHERE n.recipient_user_id = $1 AND n.is_read = false
`

func (q *Queries) GetUnreadnotificationCount(ctx context.Context, recipientUserID string) (int64, error) {
	row := q.db.QueryRow(ctx, getUnreadnotificationCount, recipientUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getnotification = `-- name: Getnotification :many
SELECT n.id, message, recipient_user_id, action_user_id, is_read, event_id, type, target_id, created_at, ne.id, description FROM notification n
JOIN events ne ON ne.id = n.event_id
WHERE recipient_user_id = $1
`

type GetnotificationRow struct {
	ID              int32     `json:"id"`
	Message         string    `json:"message"`
	RecipientUserID string    `json:"recipient_user_id"`
	ActionUserID    string    `json:"action_user_id"`
	IsRead          bool      `json:"is_read"`
	EventID         int64     `json:"event_id"`
	Type            string    `json:"type"`
	TargetID        int32     `json:"target_id"`
	CreatedAt       time.Time `json:"created_at"`
	ID_2            int64     `json:"id_2"`
	Description     string    `json:"description"`
}

func (q *Queries) Getnotification(ctx context.Context, recipientUserID string) ([]GetnotificationRow, error) {
	rows, err := q.db.Query(ctx, getnotification, recipientUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetnotificationRow
	for rows.Next() {
		var i GetnotificationRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.RecipientUserID,
			&i.ActionUserID,
			&i.IsRead,
			&i.EventID,
			&i.Type,
			&i.TargetID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (target_id,"type",created_at,description)
VALUES ($1,$2,NOW(),$3)
RETURNING id
`

type InsertEventParams struct {
	TargetID    int32  `json:"target_id"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertEvent, arg.TargetID, arg.Type, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertNotification = `-- name: InsertNotification :execresult
INSERT INTO notification (message,recipient_user_id,action_user_id,is_read,event_id)
VALUES ($1,$2,$3,false,$4)
`

type InsertNotificationParams struct {
	Message         string `json:"message"`
	RecipientUserID string `json:"recipient_user_id"`
	ActionUserID    string `json:"action_user_id"`
	EventID         int64  `json:"event_id"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertNotification,
		arg.Message,
		arg.RecipientUserID,
		arg.ActionUserID,
		arg.EventID,
	)
}

const setAllnotificationRead = `-- name: SetAllnotificationRead :exec
UPDATE notification
SET is_read = true
WHERE recipient_user_id = $1
  AND event_id IN (
    SELECT id FROM events
    WHERE created_at < $2
  )
`

type SetAllnotificationReadParams struct {
	RecipientUserID string    `json:"recipient_user_id"`
	CreatedAt       time.Time `json:"created_at"`
}

func (q *Queries) SetAllnotificationRead(ctx context.Context, arg SetAllnotificationReadParams) error {
	_, err := q.db.Exec(ctx, setAllnotificationRead, arg.RecipientUserID, arg.CreatedAt)
	return err
}

const setUsernotificationRead = `-- name: SetUsernotificationRead :execresult
UPDATE notification
SET is_read = true
WHERE id = $1 AND recipient_user_id = $2 AND is_read = false
`

type SetUsernotificationReadParams struct {
	ID              int32  `json:"id"`
	RecipientUserID string `json:"recipient_user_id"`
}

func (q *Queries) SetUsernotificationRead(ctx context.Context, arg SetUsernotificationReadParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, setUsernotificationRead, arg.ID, arg.RecipientUserID)
}
