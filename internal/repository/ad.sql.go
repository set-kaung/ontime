// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: ad.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const getAdsHistory = `-- name: GetAdsHistory :many
SELECT id, user_id, date_time FROM ads_watching_history
WHERE user_id = $1
`

func (q *Queries) GetAdsHistory(ctx context.Context, userID string) ([]AdsWatchingHistory, error) {
	rows, err := q.db.Query(ctx, getAdsHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdsWatchingHistory
	for rows.Next() {
		var i AdsWatchingHistory
		if err := rows.Scan(&i.ID, &i.UserID, &i.DateTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdsWatched = `-- name: GetAdsWatched :one
SELECT count(id) FROM ads_watching_history
WHERE user_id = $1 AND date_time > (NOW() - INTERVAL '24 hour')
`

func (q *Queries) GetAdsWatched(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getAdsWatched, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertAdsHistory = `-- name: InsertAdsHistory :execresult
INSERT INTO ads_watching_history (user_id,date_time)
VALUES ($1,NOW())
`

func (q *Queries) InsertAdsHistory(ctx context.Context, userID string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertAdsHistory, userID)
}
