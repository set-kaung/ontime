// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountStatus string

const (
	AccountStatusActive    AccountStatus = "active"
	AccountStatusSuspended AccountStatus = "suspended"
	AccountStatusBanned    AccountStatus = "banned"
)

func (e *AccountStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountStatus(s)
	case string:
		*e = AccountStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountStatus: %T", src)
	}
	return nil
}

type NullAccountStatus struct {
	AccountStatus AccountStatus `json:"account_status"`
	Valid         bool          `json:"valid"` // Valid is true if AccountStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountStatus), nil
}

type ServiceActivity string

const (
	ServiceActivityActive   ServiceActivity = "active"
	ServiceActivityInactive ServiceActivity = "inactive"
)

func (e *ServiceActivity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceActivity(s)
	case string:
		*e = ServiceActivity(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceActivity: %T", src)
	}
	return nil
}

type NullServiceActivity struct {
	ServiceActivity ServiceActivity `json:"service_activity"`
	Valid           bool            `json:"valid"` // Valid is true if ServiceActivity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceActivity) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceActivity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceActivity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceActivity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceActivity), nil
}

type ServiceRequestStatus string

const (
	ServiceRequestStatusPending    ServiceRequestStatus = "pending"
	ServiceRequestStatusAccepted   ServiceRequestStatus = "accepted"
	ServiceRequestStatusDeclined   ServiceRequestStatus = "declined"
	ServiceRequestStatusInProgress ServiceRequestStatus = "in_progress"
	ServiceRequestStatusCompleted  ServiceRequestStatus = "completed"
	ServiceRequestStatusCancelled  ServiceRequestStatus = "cancelled"
	ServiceRequestStatusExpired    ServiceRequestStatus = "expired"
)

func (e *ServiceRequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceRequestStatus(s)
	case string:
		*e = ServiceRequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceRequestStatus: %T", src)
	}
	return nil
}

type NullServiceRequestStatus struct {
	ServiceRequestStatus ServiceRequestStatus `json:"service_request_status"`
	Valid                bool                 `json:"valid"` // Valid is true if ServiceRequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceRequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceRequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceRequestStatus), nil
}

type ServiceStatus string

const (
	ServiceStatusActive     ServiceStatus = "active"
	ServiceStatusInProgress ServiceStatus = "in_progress"
	ServiceStatusCompleted  ServiceStatus = "completed"
	ServiceStatusCancelled  ServiceStatus = "cancelled"
)

func (e *ServiceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceStatus(s)
	case string:
		*e = ServiceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceStatus: %T", src)
	}
	return nil
}

type NullServiceStatus struct {
	ServiceStatus ServiceStatus `json:"service_status"`
	Valid         bool          `json:"valid"` // Valid is true if ServiceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceStatus), nil
}

type Status string

const (
	StatusCreated   Status = "created"
	StatusOngoing   Status = "ongoing"
	StatusDone      Status = "done"
	StatusCancelled Status = "cancelled"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Review struct {
	ID         int32       `json:"id"`
	RequestID  int32       `json:"request_id"`
	ReviewerID string      `json:"reviewer_id"`
	RevieweeID string      `json:"reviewee_id"`
	Rating     int32       `json:"rating"`
	Comment    pgtype.Text `json:"comment"`
	DateTime   time.Time   `json:"date_time"`
}

type ServiceListing struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	TokenReward int32     `json:"token_reward"`
	PostedBy    string    `json:"posted_by"`
	PostedAt    time.Time `json:"posted_at"`
	Category    string    `json:"category"`
}

type ServiceRequest struct {
	ID           int32                `json:"id"`
	ListingID    int32                `json:"listing_id"`
	RequesterID  string               `json:"requester_id"`
	ProviderID   string               `json:"provider_id"`
	StatusDetail ServiceRequestStatus `json:"status_detail"`
	Activity     ServiceActivity      `json:"activity"`
	DateTime     time.Time            `json:"date_time"`
}

type User struct {
	ID            string        `json:"id"`
	FirstName     string        `json:"first_name"`
	LastName      string        `json:"last_name"`
	Phone         string        `json:"phone"`
	TokenBalance  int32         `json:"token_balance"`
	Status        AccountStatus `json:"status"`
	AddressLine1  string        `json:"address_line_1"`
	AddressLine2  string        `json:"address_line_2"`
	City          string        `json:"city"`
	StateProvince string        `json:"state_province"`
	ZipPostalCode string        `json:"zip_postal_code"`
	Country       string        `json:"country"`
	JoinedAt      time.Time     `json:"joined_at"`
}
