// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountStatus string

const (
	AccountStatusActive    AccountStatus = "active"
	AccountStatusSuspended AccountStatus = "suspended"
	AccountStatusBanned    AccountStatus = "banned"
)

func (e *AccountStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountStatus(s)
	case string:
		*e = AccountStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountStatus: %T", src)
	}
	return nil
}

type NullAccountStatus struct {
	AccountStatus AccountStatus `json:"account_status"`
	Valid         bool          `json:"valid"` // Valid is true if AccountStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusInitiated PaymentStatus = "initiated"
	PaymentStatusHolding   PaymentStatus = "holding"
	PaymentStatusReleased  PaymentStatus = "released"
	PaymentStatusRefunded  PaymentStatus = "refunded"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type ServiceActivity string

const (
	ServiceActivityActive   ServiceActivity = "active"
	ServiceActivityInactive ServiceActivity = "inactive"
)

func (e *ServiceActivity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceActivity(s)
	case string:
		*e = ServiceActivity(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceActivity: %T", src)
	}
	return nil
}

type NullServiceActivity struct {
	ServiceActivity ServiceActivity `json:"service_activity"`
	Valid           bool            `json:"valid"` // Valid is true if ServiceActivity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceActivity) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceActivity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceActivity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceActivity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceActivity), nil
}

type ServiceRequestStatus string

const (
	ServiceRequestStatusPending    ServiceRequestStatus = "pending"
	ServiceRequestStatusAccepted   ServiceRequestStatus = "accepted"
	ServiceRequestStatusDeclined   ServiceRequestStatus = "declined"
	ServiceRequestStatusInProgress ServiceRequestStatus = "in_progress"
	ServiceRequestStatusCompleted  ServiceRequestStatus = "completed"
	ServiceRequestStatusCancelled  ServiceRequestStatus = "cancelled"
	ServiceRequestStatusExpired    ServiceRequestStatus = "expired"
)

func (e *ServiceRequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceRequestStatus(s)
	case string:
		*e = ServiceRequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceRequestStatus: %T", src)
	}
	return nil
}

type NullServiceRequestStatus struct {
	ServiceRequestStatus ServiceRequestStatus `json:"service_request_status"`
	Valid                bool                 `json:"valid"` // Valid is true if ServiceRequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceRequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceRequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceRequestStatus), nil
}

type ServiceStatus string

const (
	ServiceStatusActive     ServiceStatus = "active"
	ServiceStatusInProgress ServiceStatus = "in_progress"
	ServiceStatusCompleted  ServiceStatus = "completed"
	ServiceStatusCancelled  ServiceStatus = "cancelled"
)

func (e *ServiceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceStatus(s)
	case string:
		*e = ServiceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceStatus: %T", src)
	}
	return nil
}

type NullServiceStatus struct {
	ServiceStatus ServiceStatus `json:"service_status"`
	Valid         bool          `json:"valid"` // Valid is true if ServiceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServiceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ServiceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServiceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServiceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServiceStatus), nil
}

type Status string

const (
	StatusCreated   Status = "created"
	StatusOngoing   Status = "ongoing"
	StatusDone      Status = "done"
	StatusCancelled Status = "cancelled"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type AdsWatchingHistory struct {
	ID       int32     `json:"id"`
	UserID   string    `json:"user_id"`
	DateTime time.Time `json:"date_time"`
}

type CouponCode struct {
	ID         int32  `json:"id"`
	CouponCode string `json:"coupon_code"`
	RewardID   int32  `json:"reward_id"`
	IsClaimed  bool   `json:"is_claimed"`
}

type Event struct {
	Type        string    `json:"type"`
	TargetID    int32     `json:"target_id"`
	CreatedAt   time.Time `json:"created_at"`
	ID          int64     `json:"id"`
	Description string    `json:"description"`
}

type Notification struct {
	ID              int32  `json:"id"`
	Message         string `json:"message"`
	RecipientUserID string `json:"recipient_user_id"`
	ActionUserID    string `json:"action_user_id"`
	IsRead          bool   `json:"is_read"`
	EventID         int64  `json:"event_id"`
}

type Payment struct {
	ID               int32         `json:"id"`
	ServiceRequestID int32         `json:"service_request_id"`
	PayerID          string        `json:"payer_id"`
	AmountTokens     int32         `json:"amount_tokens"`
	Status           PaymentStatus `json:"status"`
	CreatedAt        time.Time     `json:"created_at"`
	UpdatedAt        time.Time     `json:"updated_at"`
}

type Rating struct {
	UserID       string `json:"user_id"`
	TotalRatings int32  `json:"total_ratings"`
	RatingCount  int32  `json:"rating_count"`
}

type RedeemedReward struct {
	ID           int32     `json:"id"`
	RewardID     int32     `json:"reward_id"`
	UserID       string    `json:"user_id"`
	RedeemedAt   time.Time `json:"redeemed_at"`
	Cost         int32     `json:"cost"`
	CouponCodeID int32     `json:"coupon_code_id"`
}

type Report struct {
	ID               int32       `json:"id"`
	ListingID        int32       `json:"listing_id"`
	ReporterID       string      `json:"reporter_id"`
	Datetime         time.Time   `json:"datetime"`
	ReportReason     pgtype.Text `json:"report_reason"`
	Status           string      `json:"status"`
	AdditionalDetail pgtype.Text `json:"additional_detail"`
}

type RequestReport struct {
	ID         int32     `json:"id"`
	ReporterID string    `json:"reporter_id"`
	RequestID  int32     `json:"request_id"`
	TicketID   string    `json:"ticket_id"`
	CreatedAt  time.Time `json:"created_at"`
	Status     string    `json:"status"`
}

type Review struct {
	ID         int32       `json:"id"`
	RequestID  int32       `json:"request_id"`
	ReviewerID string      `json:"reviewer_id"`
	RevieweeID string      `json:"reviewee_id"`
	Rating     int32       `json:"rating"`
	Comment    pgtype.Text `json:"comment"`
	DateTime   time.Time   `json:"date_time"`
}

type Reward struct {
	ID          int32       `json:"id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Cost        int32       `json:"cost"`
	ImageUrl    pgtype.Text `json:"image_url"`
	CreatedDate time.Time   `json:"created_date"`
}

type ServiceListing struct {
	ID              int32           `json:"id"`
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	TokenReward     int32           `json:"token_reward"`
	PostedBy        string          `json:"posted_by"`
	PostedAt        time.Time       `json:"posted_at"`
	Category        string          `json:"category"`
	ImageUrl        pgtype.Text     `json:"image_url"`
	Status          string          `json:"status"`
	ContactMethod   pgtype.Text     `json:"contact_method"`
	SessionDuration pgtype.Interval `json:"session_duration"`
}

type ServiceRequest struct {
	ID           int32                `json:"id"`
	ListingID    int32                `json:"listing_id"`
	RequesterID  string               `json:"requester_id"`
	ProviderID   string               `json:"provider_id"`
	StatusDetail ServiceRequestStatus `json:"status_detail"`
	Activity     ServiceActivity      `json:"activity"`
	CreatedAt    time.Time            `json:"created_at"`
	UpdatedAt    time.Time            `json:"updated_at"`
	TokenReward  int32                `json:"token_reward"`
}

type ServiceRequestCompletion struct {
	ID                 int32 `json:"id"`
	RequestID          int32 `json:"request_id"`
	RequesterCompleted bool  `json:"requester_completed"`
	ProviderCompleted  bool  `json:"provider_completed"`
	IsActive           bool  `json:"is_active"`
}

type Transaction struct {
	ID        int32     `json:"id"`
	UserID    string    `json:"user_id"`
	Type      string    `json:"type"`
	Amount    int32     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID              string        `json:"id"`
	Phone           string        `json:"phone"`
	TokenBalance    int32         `json:"token_balance"`
	Status          AccountStatus `json:"status"`
	AddressLine1    string        `json:"address_line_1"`
	AddressLine2    string        `json:"address_line_2"`
	City            string        `json:"city"`
	StateProvince   string        `json:"state_province"`
	ZipPostalCode   string        `json:"zip_postal_code"`
	Country         string        `json:"country"`
	JoinedAt        time.Time     `json:"joined_at"`
	IsEmailSignedup bool          `json:"is_email_signedup"`
	FullName        string        `json:"full_name"`
	IsPaid          bool          `json:"is_paid"`
	AboutMe         pgtype.Text   `json:"about_me"`
}
