// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type Status string

const (
	StatusCreated   Status = "created"
	StatusOngoing   Status = "ongoing"
	StatusDone      Status = "done"
	StatusCancelled Status = "cancelled"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type ClientTransaction struct {
	ClientID      int32 `json:"client_id"`
	TransactionID int32 `json:"transaction_id"`
}

type Profile struct {
	ID              int32       `json:"id"`
	UserID          int32       `json:"user_id"`
	Username        string      `json:"username"`
	Tokens          int32       `json:"tokens"`
	Rating          float64     `json:"rating"`
	JoinedAt        time.Time   `json:"joined_at"`
	ProfilePhotoUrl pgtype.Text `json:"profile_photo_url"`
}

type ProviderTransaction struct {
	ProviderID    int32 `json:"provider_id"`
	TransactionID int32 `json:"transaction_id"`
}

type Service struct {
	ID          int32              `json:"id"`
	UserID      int32              `json:"user_id"`
	Cost        int32              `json:"cost"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Session struct {
	Token  string             `json:"token"`
	Data   []byte             `json:"data"`
	Expiry pgtype.Timestamptz `json:"expiry"`
}

type Transaction struct {
	ID         int32 `json:"id"`
	ProviderID int32 `json:"provider_id"`
	ClientID   int32 `json:"client_id"`
	ServiceID  int32 `json:"service_id"`
}

type TransactionStatus struct {
	ID                int32              `json:"id"`
	TransactionID     int32              `json:"transaction_id"`
	TransactionStatus Status             `json:"transaction_status"`
	DateTime          pgtype.Timestamptz `json:"date_time"`
}

type User struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}
