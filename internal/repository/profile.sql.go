// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profile.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProfile = `-- name: GetProfile :one
SELECT u.email, p.username, p.tokens, p.joined_at, p.rating,p.profile_photo_url
FROM users u
JOIN profiles p ON u.id = p.user_id
WHERE u.id = $1
`

type GetProfileRow struct {
	Email           string      `json:"email"`
	Username        string      `json:"username"`
	Tokens          int32       `json:"tokens"`
	JoinedAt        time.Time   `json:"joined_at"`
	Rating          float64     `json:"rating"`
	ProfilePhotoUrl pgtype.Text `json:"profile_photo_url"`
}

func (q *Queries) GetProfile(ctx context.Context, id int32) (GetProfileRow, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i GetProfileRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.Tokens,
		&i.JoinedAt,
		&i.Rating,
		&i.ProfilePhotoUrl,
	)
	return i, err
}

const insertProfile = `-- name: InsertProfile :execresult
INSERT INTO profiles (user_id, username, tokens,rating,joined_at)
VALUES ($1, $2, $3, $4, CURRENT_DATE)
`

type InsertProfileParams struct {
	UserID   int32   `json:"user_id"`
	Username string  `json:"username"`
	Tokens   int32   `json:"tokens"`
	Rating   float64 `json:"rating"`
}

func (q *Queries) InsertProfile(ctx context.Context, arg InsertProfileParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertProfile,
		arg.UserID,
		arg.Username,
		arg.Tokens,
		arg.Rating,
	)
}
