// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: review.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getListingReviews = `-- name: GetListingReviews :many
SELECT r.id, r.request_id, r.reviewer_id, r.reviewee_id, r.rating, r.comment, r.date_time,
       sr.listing_id,
       reviewer.full_name AS reviewer_full_name,
       reviewee.full_name AS reviewee_full_name
FROM review r
JOIN service_request sr
  ON sr.id = r.request_id
JOIN "user" AS reviewer
  ON reviewer.id = r.reviewer_id
JOIN "user" AS reviewee
  ON reviewee.id = r.reviewee_id
WHERE sr.listing_id = $1
`

type GetListingReviewsRow struct {
	ID               int32       `json:"id"`
	RequestID        int32       `json:"request_id"`
	ReviewerID       string      `json:"reviewer_id"`
	RevieweeID       string      `json:"reviewee_id"`
	Rating           int32       `json:"rating"`
	Comment          pgtype.Text `json:"comment"`
	DateTime         time.Time   `json:"date_time"`
	ListingID        int32       `json:"listing_id"`
	ReviewerFullName string      `json:"reviewer_full_name"`
	RevieweeFullName string      `json:"reviewee_full_name"`
}

func (q *Queries) GetListingReviews(ctx context.Context, listingID int32) ([]GetListingReviewsRow, error) {
	rows, err := q.db.Query(ctx, getListingReviews, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListingReviewsRow
	for rows.Next() {
		var i GetListingReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.ReviewerID,
			&i.RevieweeID,
			&i.Rating,
			&i.Comment,
			&i.DateTime,
			&i.ListingID,
			&i.ReviewerFullName,
			&i.RevieweeFullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, request_id, reviewer_id, reviewee_id, rating, comment, date_time FROM review
WHERE id = $1
`

func (q *Queries) GetReviewByID(ctx context.Context, id int32) (Review, error) {
	row := q.db.QueryRow(ctx, getReviewByID, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ReviewerID,
		&i.RevieweeID,
		&i.Rating,
		&i.Comment,
		&i.DateTime,
	)
	return i, err
}

const getReviewByRequestID = `-- name: GetReviewByRequestID :one
SELECT r.id, r.request_id, r.reviewer_id, r.reviewee_id, r.rating, r.comment, r.date_time,
    reviewer.full_name AS reviewer_full_name,
    reviewee.full_name AS reviewee_full_name
FROM review r
JOIN "user" AS reviewer
  ON reviewer.id = r.reviewer_id
JOIN "user" AS reviewee
  ON reviewee.id = r.reviewee_id
WHERE r.request_id = $1
`

type GetReviewByRequestIDRow struct {
	ID               int32       `json:"id"`
	RequestID        int32       `json:"request_id"`
	ReviewerID       string      `json:"reviewer_id"`
	RevieweeID       string      `json:"reviewee_id"`
	Rating           int32       `json:"rating"`
	Comment          pgtype.Text `json:"comment"`
	DateTime         time.Time   `json:"date_time"`
	ReviewerFullName string      `json:"reviewer_full_name"`
	RevieweeFullName string      `json:"reviewee_full_name"`
}

func (q *Queries) GetReviewByRequestID(ctx context.Context, requestID int32) (GetReviewByRequestIDRow, error) {
	row := q.db.QueryRow(ctx, getReviewByRequestID, requestID)
	var i GetReviewByRequestIDRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ReviewerID,
		&i.RevieweeID,
		&i.Rating,
		&i.Comment,
		&i.DateTime,
		&i.ReviewerFullName,
		&i.RevieweeFullName,
	)
	return i, err
}

const insertNewUserRating = `-- name: InsertNewUserRating :exec
INSERT INTO rating (user_id,total_ratings, rating_count)
VALUES ($1,0,0)
`

func (q *Queries) InsertNewUserRating(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, insertNewUserRating, userID)
	return err
}

const insertServiceRequestReview = `-- name: InsertServiceRequestReview :one
INSERT INTO review (request_id,reviewer_id,reviewee_id,rating,comment,date_time)
VALUES ($1,$2,(SELECT provider_id from service_request WHERE id = $1),$3,$4,NOW())
RETURNING id, reviewee_id
`

type InsertServiceRequestReviewParams struct {
	RequestID  int32       `json:"request_id"`
	ReviewerID string      `json:"reviewer_id"`
	Rating     int32       `json:"rating"`
	Comment    pgtype.Text `json:"comment"`
}

type InsertServiceRequestReviewRow struct {
	ID         int32  `json:"id"`
	RevieweeID string `json:"reviewee_id"`
}

func (q *Queries) InsertServiceRequestReview(ctx context.Context, arg InsertServiceRequestReviewParams) (InsertServiceRequestReviewRow, error) {
	row := q.db.QueryRow(ctx, insertServiceRequestReview,
		arg.RequestID,
		arg.ReviewerID,
		arg.Rating,
		arg.Comment,
	)
	var i InsertServiceRequestReviewRow
	err := row.Scan(&i.ID, &i.RevieweeID)
	return i, err
}

const updateUserRating = `-- name: UpdateUserRating :one
UPDATE rating
SET total_ratings = total_ratings + $1,
    rating_count  = rating_count + 1
WHERE user_id = (
    SELECT provider_id FROM service_request
    WHERE id = $2
)
RETURNING user_id, total_ratings, rating_count
`

type UpdateUserRatingParams struct {
	TotalRatings int32 `json:"total_ratings"`
	RequestID    int32 `json:"request_id"`
}

func (q *Queries) UpdateUserRating(ctx context.Context, arg UpdateUserRatingParams) (Rating, error) {
	row := q.db.QueryRow(ctx, updateUserRating, arg.TotalRatings, arg.RequestID)
	var i Rating
	err := row.Scan(&i.UserID, &i.TotalRatings, &i.RatingCount)
	return i, err
}
