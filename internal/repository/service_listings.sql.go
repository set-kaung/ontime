// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: service_listings.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteListing = `-- name: DeleteListing :execresult
UPDATE service_listings
SET status = 'inactive'
WHERE id = $1 AND posted_by = $2
`

type DeleteListingParams struct {
	ID       int32  `json:"id"`
	PostedBy string `json:"posted_by"`
}

func (q *Queries) DeleteListing(ctx context.Context, arg DeleteListingParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteListing, arg.ID, arg.PostedBy)
}

const getAllListings = `-- name: GetAllListings :many
SELECT sl.id, sl.title, sl.description, sl.token_reward, sl.posted_by, sl.posted_at, sl.category, sl.image_url, sl.status, sl.contact_method, sl.session_duration,u.id uid,u.full_name FROM service_listings sl
JOIN users u
ON u.id = sl.posted_by
WHERE posted_by != $1 AND sl.status = 'active'
`

type GetAllListingsRow struct {
	ID              int32           `json:"id"`
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	TokenReward     int32           `json:"token_reward"`
	PostedBy        string          `json:"posted_by"`
	PostedAt        time.Time       `json:"posted_at"`
	Category        string          `json:"category"`
	ImageUrl        pgtype.Text     `json:"image_url"`
	Status          string          `json:"status"`
	ContactMethod   pgtype.Text     `json:"contact_method"`
	SessionDuration pgtype.Interval `json:"session_duration"`
	Uid             string          `json:"uid"`
	FullName        string          `json:"full_name"`
}

func (q *Queries) GetAllListings(ctx context.Context, postedBy string) ([]GetAllListingsRow, error) {
	rows, err := q.db.Query(ctx, getAllListings, postedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllListingsRow
	for rows.Next() {
		var i GetAllListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TokenReward,
			&i.PostedBy,
			&i.PostedAt,
			&i.Category,
			&i.ImageUrl,
			&i.Status,
			&i.ContactMethod,
			&i.SessionDuration,
			&i.Uid,
			&i.FullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingByID = `-- name: GetListingByID :one
SELECT sl.id, sl.title, sl.description, sl.token_reward, sl.posted_by, sl.posted_at, sl.category, sl.image_url, sl.status, sl.contact_method, sl.session_duration,u.id uid,u.full_name,sr.id as request_id,r.total_ratings,r.rating_count FROM service_listings sl
JOIN users u
ON u.id = sl.posted_by
LEFT JOIN service_requests sr ON sr.listing_id = sl.id AND sr.activity = 'active' AND sr.requester_id = $2
LEFT JOIN ratings r ON r.user_id = sl.posted_by
WHERE sl.id = $1 and sl.status = 'active'
`

type GetListingByIDParams struct {
	ID          int32  `json:"id"`
	RequesterID string `json:"requester_id"`
}

type GetListingByIDRow struct {
	ID              int32           `json:"id"`
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	TokenReward     int32           `json:"token_reward"`
	PostedBy        string          `json:"posted_by"`
	PostedAt        time.Time       `json:"posted_at"`
	Category        string          `json:"category"`
	ImageUrl        pgtype.Text     `json:"image_url"`
	Status          string          `json:"status"`
	ContactMethod   pgtype.Text     `json:"contact_method"`
	SessionDuration pgtype.Interval `json:"session_duration"`
	Uid             string          `json:"uid"`
	FullName        string          `json:"full_name"`
	RequestID       pgtype.Int4     `json:"request_id"`
	TotalRatings    pgtype.Int4     `json:"total_ratings"`
	RatingCount     pgtype.Int4     `json:"rating_count"`
}

func (q *Queries) GetListingByID(ctx context.Context, arg GetListingByIDParams) (GetListingByIDRow, error) {
	row := q.db.QueryRow(ctx, getListingByID, arg.ID, arg.RequesterID)
	var i GetListingByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TokenReward,
		&i.PostedBy,
		&i.PostedAt,
		&i.Category,
		&i.ImageUrl,
		&i.Status,
		&i.ContactMethod,
		&i.SessionDuration,
		&i.Uid,
		&i.FullName,
		&i.RequestID,
		&i.TotalRatings,
		&i.RatingCount,
	)
	return i, err
}

const getUserListings = `-- name: GetUserListings :many
SELECT id, title, description, token_reward, posted_by, posted_at, category, image_url, status, contact_method, session_duration FROM service_listings
WHERE posted_by = $1 AND status = 'active'
`

func (q *Queries) GetUserListings(ctx context.Context, postedBy string) ([]ServiceListing, error) {
	rows, err := q.db.Query(ctx, getUserListings, postedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceListing
	for rows.Next() {
		var i ServiceListing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TokenReward,
			&i.PostedBy,
			&i.PostedAt,
			&i.Category,
			&i.ImageUrl,
			&i.Status,
			&i.ContactMethod,
			&i.SessionDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertListing = `-- name: InsertListing :one
INSERT INTO service_listings (title,"description",token_reward,posted_by,category,image_url,posted_at,status,session_duration,contact_method)
VALUES ($1, $2, $3, $4,$5,$6, NOW(),'active',$7,$8)
RETURNING id
`

type InsertListingParams struct {
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	TokenReward     int32           `json:"token_reward"`
	PostedBy        string          `json:"posted_by"`
	Category        string          `json:"category"`
	ImageUrl        pgtype.Text     `json:"image_url"`
	SessionDuration pgtype.Interval `json:"session_duration"`
	ContactMethod   pgtype.Text     `json:"contact_method"`
}

func (q *Queries) InsertListing(ctx context.Context, arg InsertListingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertListing,
		arg.Title,
		arg.Description,
		arg.TokenReward,
		arg.PostedBy,
		arg.Category,
		arg.ImageUrl,
		arg.SessionDuration,
		arg.ContactMethod,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateListing = `-- name: UpdateListing :execrows
UPDATE service_listings
SET title = $1, description = $2, token_reward = $3, category=$4, image_url = $5, session_duration = $6, contact_method = $7
WHERE id = $8 AND posted_by = $9
`

type UpdateListingParams struct {
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	TokenReward     int32           `json:"token_reward"`
	Category        string          `json:"category"`
	ImageUrl        pgtype.Text     `json:"image_url"`
	SessionDuration pgtype.Interval `json:"session_duration"`
	ContactMethod   pgtype.Text     `json:"contact_method"`
	ID              int32           `json:"id"`
	PostedBy        string          `json:"posted_by"`
}

func (q *Queries) UpdateListing(ctx context.Context, arg UpdateListingParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateListing,
		arg.Title,
		arg.Description,
		arg.TokenReward,
		arg.Category,
		arg.ImageUrl,
		arg.SessionDuration,
		arg.ContactMethod,
		arg.ID,
		arg.PostedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
