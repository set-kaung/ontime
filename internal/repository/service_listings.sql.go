// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_listings.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgconn"
)

const deleteListing = `-- name: DeleteListing :execresult
DELETE FROM service_listings
WHERE id = $1 AND posted_by = $2
`

type DeleteListingParams struct {
	ID       int32  `json:"id"`
	PostedBy string `json:"posted_by"`
}

func (q *Queries) DeleteListing(ctx context.Context, arg DeleteListingParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteListing, arg.ID, arg.PostedBy)
}

const getAllListings = `-- name: GetAllListings :many
SELECT sl.id,sl.title,sl.description,sl.token_reward,sl.posted_at,sl.category,u.id uid,u.full_name FROM service_listings sl
JOIN users u
ON u.id = sl.posted_by
WHERE posted_by != $1
`

type GetAllListingsRow struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	TokenReward int32     `json:"token_reward"`
	PostedAt    time.Time `json:"posted_at"`
	Category    string    `json:"category"`
	Uid         string    `json:"uid"`
	FullName    string    `json:"full_name"`
}

func (q *Queries) GetAllListings(ctx context.Context, postedBy string) ([]GetAllListingsRow, error) {
	rows, err := q.db.Query(ctx, getAllListings, postedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllListingsRow
	for rows.Next() {
		var i GetAllListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TokenReward,
			&i.PostedAt,
			&i.Category,
			&i.Uid,
			&i.FullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingByID = `-- name: GetListingByID :one
SELECT sl.id,sl.title,sl.description,sl.token_reward,sl.posted_at,sl.category,u.id uid,u.full_name FROM service_listings sl
JOIN users u
on u.id = sl.posted_by
WHERE sl.id = $1
`

type GetListingByIDRow struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	TokenReward int32     `json:"token_reward"`
	PostedAt    time.Time `json:"posted_at"`
	Category    string    `json:"category"`
	Uid         string    `json:"uid"`
	FullName    string    `json:"full_name"`
}

func (q *Queries) GetListingByID(ctx context.Context, id int32) (GetListingByIDRow, error) {
	row := q.db.QueryRow(ctx, getListingByID, id)
	var i GetListingByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TokenReward,
		&i.PostedAt,
		&i.Category,
		&i.Uid,
		&i.FullName,
	)
	return i, err
}

const getUserListings = `-- name: GetUserListings :many
SELECT id, title, description, token_reward, posted_by, posted_at, category FROM service_listings
WHERE posted_by = $1
`

func (q *Queries) GetUserListings(ctx context.Context, postedBy string) ([]ServiceListing, error) {
	rows, err := q.db.Query(ctx, getUserListings, postedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceListing
	for rows.Next() {
		var i ServiceListing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TokenReward,
			&i.PostedBy,
			&i.PostedAt,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertListing = `-- name: InsertListing :one
INSERT INTO service_listings (title,"description",token_reward,posted_by,category,posted_at)
VALUES ($1, $2, $3, $4,$5, NOW())
RETURNING id
`

type InsertListingParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	TokenReward int32  `json:"token_reward"`
	PostedBy    string `json:"posted_by"`
	Category    string `json:"category"`
}

func (q *Queries) InsertListing(ctx context.Context, arg InsertListingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertListing,
		arg.Title,
		arg.Description,
		arg.TokenReward,
		arg.PostedBy,
		arg.Category,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateListing = `-- name: UpdateListing :execrows
UPDATE service_listings
SET title = $1, description = $2, token_reward = $3, category=$4
WHERE id = $5 AND posted_by = $6
`

type UpdateListingParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	TokenReward int32  `json:"token_reward"`
	Category    string `json:"category"`
	ID          int32  `json:"id"`
	PostedBy    string `json:"posted_by"`
}

func (q *Queries) UpdateListing(ctx context.Context, arg UpdateListingParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateListing,
		arg.Title,
		arg.Description,
		arg.TokenReward,
		arg.Category,
		arg.ID,
		arg.PostedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
