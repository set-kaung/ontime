// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, phone, token_balance, status, address_line_1, address_line_2, city, state_province, zip_postal_code, country, joined_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.TokenBalance,
		&i.Status,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Country,
		&i.JoinedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id,first_name,last_name,phone,token_balance,status,address_line_1,address_line_2,city,state_province,zip_postal_code,country,joined_at)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,NOW())
RETURNING id
`

type InsertUserParams struct {
	ID            string        `json:"id"`
	FirstName     string        `json:"first_name"`
	LastName      string        `json:"last_name"`
	Phone         string        `json:"phone"`
	TokenBalance  int32         `json:"token_balance"`
	Status        AccountStatus `json:"status"`
	AddressLine1  string        `json:"address_line_1"`
	AddressLine2  string        `json:"address_line_2"`
	City          string        `json:"city"`
	StateProvince string        `json:"state_province"`
	ZipPostalCode string        `json:"zip_postal_code"`
	Country       string        `json:"country"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (string, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.TokenBalance,
		arg.Status,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
		arg.Country,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
  SELECT 1 FROM users WHERE id = $1
)
`

func (q *Queries) UserExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
