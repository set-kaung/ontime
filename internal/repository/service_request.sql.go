// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_request.sql

package repository

import (
	"context"
	"time"
)

const getAllIncomingServiceRequests = `-- name: GetAllIncomingServiceRequests :many
SELECT id, listing_id, requester_id, provider_id, status_detail, activity, created_at, updated_at FROM service_requests
WHERE provider_id = $1 AND activity = 'active'
`

func (q *Queries) GetAllIncomingServiceRequests(ctx context.Context, providerID string) ([]ServiceRequest, error) {
	rows, err := q.db.Query(ctx, getAllIncomingServiceRequests, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceRequest
	for rows.Next() {
		var i ServiceRequest
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.RequesterID,
			&i.ProviderID,
			&i.StatusDetail,
			&i.Activity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestByID = `-- name: GetRequestByID :one
SELECT sr.id, listing_id, requester_id, provider_id, status_detail, activity, created_at, updated_at, sl.id, title, description, token_reward, posted_by, posted_at, category FROM service_requests sr
JOIN service_listings sl ON sr.listing_id = sl.id
WHERE sr.id = $1
`

type GetRequestByIDRow struct {
	ID           int32                `json:"id"`
	ListingID    int32                `json:"listing_id"`
	RequesterID  string               `json:"requester_id"`
	ProviderID   string               `json:"provider_id"`
	StatusDetail ServiceRequestStatus `json:"status_detail"`
	Activity     ServiceActivity      `json:"activity"`
	CreatedAt    time.Time            `json:"created_at"`
	UpdatedAt    time.Time            `json:"updated_at"`
	ID_2         int32                `json:"id_2"`
	Title        string               `json:"title"`
	Description  string               `json:"description"`
	TokenReward  int32                `json:"token_reward"`
	PostedBy     string               `json:"posted_by"`
	PostedAt     time.Time            `json:"posted_at"`
	Category     string               `json:"category"`
}

func (q *Queries) GetRequestByID(ctx context.Context, id int32) (GetRequestByIDRow, error) {
	row := q.db.QueryRow(ctx, getRequestByID, id)
	var i GetRequestByIDRow
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.RequesterID,
		&i.ProviderID,
		&i.StatusDetail,
		&i.Activity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Title,
		&i.Description,
		&i.TokenReward,
		&i.PostedBy,
		&i.PostedAt,
		&i.Category,
	)
	return i, err
}

const getServiceRequestCompletion = `-- name: GetServiceRequestCompletion :one
SELECT id, request_id, requester_completion, provider_completion, is_active FROM service_request_completion
WHERE request_id = $1
`

func (q *Queries) GetServiceRequestCompletion(ctx context.Context, requestID int32) (ServiceRequestCompletion, error) {
	row := q.db.QueryRow(ctx, getServiceRequestCompletion, requestID)
	var i ServiceRequestCompletion
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RequesterCompletion,
		&i.ProviderCompletion,
		&i.IsActive,
	)
	return i, err
}

const insertPendingServiceRequest = `-- name: InsertPendingServiceRequest :one
INSERT INTO service_requests (listing_id,requester_id,provider_id,status_detail,activity,created_at,updated_at)
SELECT
    $1,
    $2,
    sl.posted_by,
    'pending', 'active', NOW(),NOW()
FROM service_listings sl
WHERE sl.id = $1 AND sl.posted_by != $2
RETURNING id
`

type InsertPendingServiceRequestParams struct {
	ListingID   int32  `json:"listing_id"`
	RequesterID string `json:"requester_id"`
}

func (q *Queries) InsertPendingServiceRequest(ctx context.Context, arg InsertPendingServiceRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPendingServiceRequest, arg.ListingID, arg.RequesterID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertServiceRequestCompletion = `-- name: InsertServiceRequestCompletion :exec
INSERT INTO service_request_completion (request_id,requester_completion,provider_completion,is_active)
VALUES ($1,false,false,true)
`

func (q *Queries) InsertServiceRequestCompletion(ctx context.Context, requestID int32) error {
	_, err := q.db.Exec(ctx, insertServiceRequestCompletion, requestID)
	return err
}

const updateServiceRequest = `-- name: UpdateServiceRequest :one
UPDATE service_requests
SET status_detail = $1, activity = $2, updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateServiceRequestParams struct {
	StatusDetail ServiceRequestStatus `json:"status_detail"`
	Activity     ServiceActivity      `json:"activity"`
	ID           int32                `json:"id"`
}

func (q *Queries) UpdateServiceRequest(ctx context.Context, arg UpdateServiceRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateServiceRequest, arg.StatusDetail, arg.Activity, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateServiceRequestCompletion = `-- name: UpdateServiceRequestCompletion :exec
UPDATE service_request_completion
SET requester_completion = $1, provider_completion = $2, is_active = $3
`

type UpdateServiceRequestCompletionParams struct {
	RequesterCompletion bool `json:"requester_completion"`
	ProviderCompletion  bool `json:"provider_completion"`
	IsActive            bool `json:"is_active"`
}

func (q *Queries) UpdateServiceRequestCompletion(ctx context.Context, arg UpdateServiceRequestCompletionParams) error {
	_, err := q.db.Exec(ctx, updateServiceRequestCompletion, arg.RequesterCompletion, arg.ProviderCompletion, arg.IsActive)
	return err
}
