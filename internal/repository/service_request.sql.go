// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_request.sql

package repository

import (
	"context"
)

const getAllIncomingServiceRequests = `-- name: GetAllIncomingServiceRequests :many
SELECT id, listing_id, requester_id, provider_id, status_detail, activity, date_time FROM service_requests
WHERE provider_id = $1 AND activity = 'active'
`

func (q *Queries) GetAllIncomingServiceRequests(ctx context.Context, providerID string) ([]ServiceRequest, error) {
	rows, err := q.db.Query(ctx, getAllIncomingServiceRequests, providerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceRequest
	for rows.Next() {
		var i ServiceRequest
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.RequesterID,
			&i.ProviderID,
			&i.StatusDetail,
			&i.Activity,
			&i.DateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertServiceRequest = `-- name: InsertServiceRequest :one
INSERT INTO service_requests (listing_id,requester_id,provider_id,status_detail,activity,date_time)
SELECT
    $1,
    $2,
    sl.posted_by,
    $3, $4, NOW()
FROM service_listings sl
WHERE sl.id = $1 AND sl.posted_by != $2
RETURNING id
`

type InsertServiceRequestParams struct {
	ListingID    int32                `json:"listing_id"`
	RequesterID  string               `json:"requester_id"`
	StatusDetail ServiceRequestStatus `json:"status_detail"`
	Activity     ServiceActivity      `json:"activity"`
}

func (q *Queries) InsertServiceRequest(ctx context.Context, arg InsertServiceRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertServiceRequest,
		arg.ListingID,
		arg.RequesterID,
		arg.StatusDetail,
		arg.Activity,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
