// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reviews.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, request_id, reviewer_id, reviewee_id, rating, comment, date_time FROM reviews
WHERE id = $1
`

func (q *Queries) GetReviewByID(ctx context.Context, id int32) (Review, error) {
	row := q.db.QueryRow(ctx, getReviewByID, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.ReviewerID,
		&i.RevieweeID,
		&i.Rating,
		&i.Comment,
		&i.DateTime,
	)
	return i, err
}

const insertNewUserRating = `-- name: InsertNewUserRating :exec
INSERT INTO ratings (user_id,total_ratings, rating_count)
VALUES ($1,0,0)
`

func (q *Queries) InsertNewUserRating(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, insertNewUserRating, userID)
	return err
}

const insertServiceRequestReview = `-- name: InsertServiceRequestReview :one
INSERT INTO reviews (request_id,reviewer_id,reviewee_id,rating,comment,date_time)
VALUES ($1,$2,(SELECT provider_id from service_requests WHERE id = $1),$3,$4,NOW())
RETURNING id, reviewee_id
`

type InsertServiceRequestReviewParams struct {
	RequestID  int32       `json:"request_id"`
	ReviewerID string      `json:"reviewer_id"`
	Rating     int32       `json:"rating"`
	Comment    pgtype.Text `json:"comment"`
}

type InsertServiceRequestReviewRow struct {
	ID         int32  `json:"id"`
	RevieweeID string `json:"reviewee_id"`
}

func (q *Queries) InsertServiceRequestReview(ctx context.Context, arg InsertServiceRequestReviewParams) (InsertServiceRequestReviewRow, error) {
	row := q.db.QueryRow(ctx, insertServiceRequestReview,
		arg.RequestID,
		arg.ReviewerID,
		arg.Rating,
		arg.Comment,
	)
	var i InsertServiceRequestReviewRow
	err := row.Scan(&i.ID, &i.RevieweeID)
	return i, err
}

const updateUserRating = `-- name: UpdateUserRating :exec
UPDATE ratings
SET total_ratings = total_ratings + $1, rating_count = rating_count + 1
WHERE user_id = $2
`

type UpdateUserRatingParams struct {
	TotalRatings int32  `json:"total_ratings"`
	UserID       string `json:"user_id"`
}

func (q *Queries) UpdateUserRating(ctx context.Context, arg UpdateUserRatingParams) error {
	_, err := q.db.Exec(ctx, updateUserRating, arg.TotalRatings, arg.UserID)
	return err
}
