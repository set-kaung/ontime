// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (password, email)
VALUES ($1, $2)
RETURNING id
`

type InsertUserParams struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Password, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
  SELECT 1 FROM users WHERE id = $1
)
`

func (q *Queries) UserExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
