// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payment.sql

package repository

import (
	"context"
)

const getPaymentHolding = `-- name: GetPaymentHolding :one
SELECT id, service_request_id, payer_id, amount_tokens, status, created_at, updated_at FROM payment
WHERE service_request_id = $1 AND payer_id = $2
`

type GetPaymentHoldingParams struct {
	ServiceRequestID int32  `json:"service_request_id"`
	PayerID          string `json:"payer_id"`
}

func (q *Queries) GetPaymentHolding(ctx context.Context, arg GetPaymentHoldingParams) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentHolding, arg.ServiceRequestID, arg.PayerID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ServiceRequestID,
		&i.PayerID,
		&i.AmountTokens,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRequestPayment = `-- name: GetRequestPayment :one
SELECT id, service_request_id, payer_id, amount_tokens, status, created_at, updated_at FROM payment
WHERE service_request_id = $1
`

func (q *Queries) GetRequestPayment(ctx context.Context, serviceRequestID int32) (Payment, error) {
	row := q.db.QueryRow(ctx, getRequestPayment, serviceRequestID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ServiceRequestID,
		&i.PayerID,
		&i.AmountTokens,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPaymentHolding = `-- name: InsertPaymentHolding :one
INSERT INTO payment(service_request_id,payer_id,status,amount_tokens,created_at,updated_at)
SELECT
    $1,
    $2,
    'holding',sr.token_reward,NOW(),NOW()
FROM service_request sr
WHERE sr.id = $1
RETURNING id
`

type InsertPaymentHoldingParams struct {
	ServiceRequestID int32  `json:"service_request_id"`
	PayerID          string `json:"payer_id"`
}

func (q *Queries) InsertPaymentHolding(ctx context.Context, arg InsertPaymentHoldingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPaymentHolding, arg.ServiceRequestID, arg.PayerID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updatePaymentHolding = `-- name: UpdatePaymentHolding :one
UPDATE payment
SET status = $1, updated_at = NOW()
WHERE service_request_id = $2
RETURNING id
`

type UpdatePaymentHoldingParams struct {
	Status           PaymentStatus `json:"status"`
	ServiceRequestID int32         `json:"service_request_id"`
}

func (q *Queries) UpdatePaymentHolding(ctx context.Context, arg UpdatePaymentHoldingParams) (int32, error) {
	row := q.db.QueryRow(ctx, updatePaymentHolding, arg.Status, arg.ServiceRequestID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
