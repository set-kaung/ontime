openapi: 3.0.3
info:
  title: SeniorProject1 API
  description: >-
    API for user management, service listings, requests, reviews, notifications,
    advertisements, and rewards. Spec synchronized with code as of 2025-09-17.
  version: 1.0.3
  contact:
    name: Set Kaung Lwin
servers:
  - url: http://localhost:8080
    description: Local development (default if PORT unset)
  - url: https://api.yourapp.com
    description: Production server

security:
  - ClerkAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API is running
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
              examples:
                ok:
                  value:
                    status: success
                    data:
                      status: healthy

  /users/me:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      tags:
        - Users
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      summary: Get user by ID (public view)
      description: Retrieves a user's public profile summary and active listings by user ID.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User summary retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserSummary'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/services:
    get:
      summary: Get user's own service listings
      description: Retrieve all service listings created by the authenticated user
      tags:
        - Users
        - Services
      responses:
        '200':
          description: User's service listings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceListing'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /update-profile-metadata:
    post:
      summary: Insert user profile (initial metadata)
      description: Inserts a new user profile record and updates Clerk public metadata (profileComplete=true).
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsert'
      responses:
        '201':
          description: Profile metadata inserted successfully (empty success envelope)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/update:
    post:
      summary: Update user profile
      description: Update mutable user profile attributes.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/change-name:
    patch:
      summary: Change user's full name
      description: "Update the authenticated user's full name (field: full_name)."
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - full_name
              properties:
                full_name:
                  type: string
      responses:
        '200':
          description: Name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/about-me:
    put:
      summary: Update user's about me section
      description: Update the authenticated user's about me text.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - about_me
              properties:
                about_me:
                  type: string
                  description: About me text (can be empty string)
      responses:
        '200':
          description: About me updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/delete:
    delete:
      summary: Delete user account
      description: Delete the authenticated user's account (Clerk + DB record).
      tags:
        - Users
      responses:
        '200':
          description: User account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notifications:
    get:
      summary: Get user notifications
      description: Retrieve notifications for the authenticated user (rate limited 20 req / 10s window as per server).
      tags:
        - Notifications
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /read-notification:
    put:
      summary: Mark notification as read
      description: Update the read status of a specific notification (query param id required)
      tags:
        - Notifications
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Notification ID
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notifications/mark-all-read:
    put:
      summary: Mark all notifications as read
      description: Mark all user notifications as read
      tags:
        - Notifications
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/tickets:
    get:
      summary: Get user's request tickets
      description: Retrieve all request reports (tickets) created by the authenticated user.
      tags:
        - Users
        - Requests
      responses:
        '200':
          description: User request tickets retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/RequestReport'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/completed-transactions/{requestId}:
    get:
      summary: Get completed transaction (service request details)
      description: Retrieve the details of a (completed) service request by its ID. Returns the same structure as Get Request By ID.
      tags:
        - Requests
        - Users
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
          description: Service request ID
      responses:
        '200':
          description: Service request retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/rewards:
    get:
      summary: Get user's redeemed rewards
      description: Retrieve all rewards redeemed by the authenticated user
      tags:
        - Users
        - Rewards
      responses:
        '200':
          description: User's redeemed rewards retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/RedeemedReward'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/history:
    get:
      summary: Get user interaction history
      description: Combined interaction history (requests, ads watched, rewards) for the authenticated user
      tags:
        - Users
      responses:
        '200':
          description: Interaction history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/InteractionHistory'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/redeemed-rewards/{redemptionId}:
    get:
      summary: Get redeemed reward by ID
      description: Retrieve a specific redeemed reward belonging to the authenticated user by its redemption ID
      tags:
        - Users
        - Rewards
      parameters:
        - name: redemptionId
          in: path
          required: true
          schema:
            type: integer
          description: Redeemed reward ID
      responses:
        '200':
          description: Redeemed reward retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RedeemedReward'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services:
    get:
      summary: Get all service listings
      description: Retrieve all available service listings
      tags:
        - Services
      responses:
        '200':
          description: Service listings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceListing'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/{id}:
    get:
      summary: Get service listing by ID
      description: Retrieve a specific service listing by its ID
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Service listing ID
      responses:
        '200':
          description: Service listing retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceListing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '404':
          $ref: '#/components/responses/NotFound'

  /services/create:
    post:
      summary: Create a new service listing
      description: Create a new service listing
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceListing'
      responses:
        '201':
          description: Service listing created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/update/{id}:
    put:
      summary: Update service listing
      description: Update an existing service listing
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceListing'
      responses:
        '200':
          description: Service listing updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/report/{id}:
    post:
      summary: Report a service listing
      description: Report a service listing for inappropriate or incorrect content
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Service listing ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListingReport'
      responses:
        '201':
          description: Service listing report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/delete/{id}:
    delete:
      summary: Delete service listing
      description: Delete an existing service listing owned by the authenticated user
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Service listing ID
      responses:
        '200':
          description: Service listing deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /services/{id}/reviews:
    get:
      summary: Get reviews for a service listing
      description: Retrieve all reviews associated with a specific service listing
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Service listing ID
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/create/{id}:
    post:
      summary: Create service request
      description: Create a new service request for a specific listing (no JSON body required)
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Service listing ID
      responses:
        '201':
          description: Service request created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          requestID:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/accept/{id}:
    post:
      summary: Accept service request
      description: Accept a pending service request
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Service request accepted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          request_id:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/decline/{id}:
    post:
      summary: Decline service request
      description: Decline a pending service request
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Service request declined successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          request_id:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/complete/{id}:
    post:
      summary: Complete service request
      description: Mark a service request as completed
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Service request completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          request_id:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/cancel/{id}:
    put:
      summary: Cancel service request
      description: Cancel a service request (requester only)
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Service request cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/{id}:
    get:
      summary: Get service request by ID
      description: Retrieve a specific service request by its ID
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Service request retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ServiceRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/all:
    get:
      summary: Get all user active requests
      description: Retrieve all active service requests for the authenticated user
      tags:
        - Requests
      responses:
        '200':
          description: User requests retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/review/{id}:
    post:
      summary: Submit review for request
      description: Submit a review for a completed service request
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReview'
      responses:
        '201':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          review_id:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get review by request ID
      description: Retrieve the review associated with the specified service request ID
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Review'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reviews/{id}:
    get:
      summary: Get review by ID
      description: Retrieve a specific review by its ID
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Review ID
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ads/complete:
    post:
      summary: Mark ad as watched
      description: Mark an advertisement as watched by the user (no request body)
      tags:
        - Advertisements
      responses:
        '201':
          description: Ad watch recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ads/watched:
    get:
      summary: Get watched ads count
      description: Get ads watched count and limit status for the user
      tags:
        - Advertisements
      responses:
        '200':
          description: Watched ads count retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          count:
                            type: integer
                          is_at_limit:
                            type: boolean
        '500':
          $ref: '#/components/responses/InternalServerError'

  /rewards:
    get:
      summary: Get all available rewards
      description: Retrieve all available rewards in the system
      tags:
        - Rewards
      responses:
        '200':
          description: Rewards retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Reward'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /rewards/{id}:
    get:
      summary: Get reward by ID
      description: Retrieve a specific reward by its ID
      tags:
        - Rewards
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Reward ID
      responses:
        '200':
          description: Reward retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Reward'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /rewards/redeem/{id}:
    post:
      summary: Redeem reward
      description: Redeem a specific reward using user tokens
      tags:
        - Rewards
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Reward ID
      responses:
        '201':
          description: Reward redemption created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          coupon_code:
                            type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /requests/report/{id}:
    post:
      summary: Report a service request
      description: Create a report ticket for a specific service request
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '201':
          description: Report ticket created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ticket_id:
                            type: string
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get a request report
      description: Retrieve a previously created report for the specified service request, belonging to the authenticated user.
      tags:
        - Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Request ID
      responses:
        '200':
          description: Request report retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RequestReport'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ClerkAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Clerk authentication token

  schemas:
    Envelope:
      type: object
      description: Standard response envelope used by all endpoints.
      properties:
        status:
          type: string
          enum: [success, error]
        message:
          type: string
          nullable: true
        data:
          description: Payload (present on success)
          nullable: true
      example:
        status: success
        data: {}

    User:
      type: object
      properties:
        id: { type: string }
        full_name: { type: string }
        phone: { type: string }
        token_balance: { type: integer }
        status: { type: string }
        address_line_1: { type: string }
        address_line_2: { type: string }
        city: { type: string }
        state_province: { type: string }
        zip_postal_code: { type: string }
        country: { type: string }
        joined_at: { type: string, format: date-time }
        is_email_signedup: { type: boolean }
        services_received: { type: integer }
        services_provided: { type: integer }
        is_paid: { type: boolean }
        rating: { type: number, format: float }

    UserInsert:
      allOf:
        - $ref: '#/components/schemas/User'
      description: Payload for inserting a new user profile (subset accepted; unspecified fields ignored).

    UserUpdate:
      type: object
      description: Fields accepted for updating an existing user profile (partial allowed).
      properties:
        full_name: { type: string }
        phone: { type: string }
        address_line_1: { type: string }
        address_line_2: { type: string }
        city: { type: string }
        state_province: { type: string }
        zip_postal_code: { type: string }
        country: { type: string }
        email: { type: boolean }

    ServiceListing:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        token_reward: { type: integer }
        posted_at: { type: string, format: date-time }
        category: { type: string }
        image_url: { type: string }
        provider: { $ref: '#/components/schemas/User' }
        has_already_taken: { type: boolean }
        taken_request_id: { type: integer }
        status: { type: string }
        session_duration: { type: integer, description: 'Duration in nanoseconds' }
        contact_method: { type: string }
        avg_rating: { type: number, format: float }

    CreateServiceListing:
      type: object
      required: [title, description, token_reward]
      properties:
        title: { type: string }
        description: { type: string }
        token_reward: { type: integer }
        category: { type: string }
        image_url: { type: string }

    UpdateServiceListing:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        token_reward: { type: integer }
        category: { type: string }
        image_url: { type: string }

    CreateListingReport:
      type: object
      required: [report_reason]
      properties:
        report_reason: { type: string }
        additional_detail: { type: string }

    ServiceRequest:
      type: object
      properties:
        id: { type: integer }
        listing: { $ref: '#/components/schemas/ServiceListing' }
        requester: { $ref: '#/components/schemas/User' }
        provider: { $ref: '#/components/schemas/User' }
        activity: { type: string, description: 'High-level activity state' }
        status_detail: { type: string, description: 'Detailed lifecycle status' }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        token_reward: { type: integer }
        type: { type: string, enum: [OUTGOING, INCOMING] }
        provider_completed: { type: boolean }
        requester_completed: { type: boolean }
        is_provider: { type: boolean }
        is_ticket_open: { type: boolean }
        review: { $ref: '#/components/schemas/Review' }
        events:
          type: array
          items: { $ref: '#/components/schemas/Event' }

    Event:
      type: object
      properties:
        event_id: { type: integer }
        event_time: { type: string, format: date-time }
        event_description: { type: string }
        by: { type: string }
        event_owner: { type: string }

    Notification:
      type: object
      properties:
        id: { type: integer }
        message: { type: string }
        recipient_user_id: { type: string }
        action_user_id: { type: string }
        is_read: { type: boolean }
        event_id: { type: integer }
        created_at: { type: string, format: date-time }
        event_type: { type: string }
        event_target_id: { type: integer }

    Reward:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        cost: { type: integer }
        available_amount: { type: integer }
        image_url: { type: string }
        created_date: { type: string, format: date-time }

    RedeemedReward:
      type: object
      properties:
        id: { type: integer }
        reward_id: { type: integer }
        reward_title: { type: string }
        description: { type: string }
        redeemed_at: { type: string, format: date-time }
        redeemed_user_id: { type: string }
        cost_at_redeemed_time: { type: integer }
        image_url: { type: string }
        coupon_code: { type: string }

    InteractionHistory:
      type: object
      properties:
        interaction_type: { type: string }
        description: { type: string }
        is_incoming: { type: boolean }
        target_id: { type: integer }
        amount: { type: integer }
        status: { type: string }
        timestamp: { type: string, format: date-time }

    Review:
      type: object
      properties:
        id: { type: integer }
        request_id: { type: integer }
        reviewer_id: { type: string }
        reviewer_full_name: { type: string }
        reviewee_full_name: { type: string }
        reviewee_id: { type: string }
        comment: { type: string }
        rating: { type: integer }
        created_at: { type: string, format: date-time }
      description: Review left on a completed service request.

    CreateReview:
      type: object
      required: [rating]
      properties:
        rating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }

    RequestReport:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: string }
        request_id: { type: integer }
        ticket_id: { type: string }
        created_at: { type: string, format: date-time }
        status: { type: string }

    PartialListing:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        rating: { type: number, format: float }
        rating_count: { type: integer }
        category: { type: string }
        token_reward: { type: integer }
        image_url: { type: string }

    UserSummary:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        active_listings:
          type: array
          items:
            $ref: '#/components/schemas/PartialListing'

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelope'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelope'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelope'
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelope'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelope'

tags:
  - name: Users
    description: User management operations
  - name: Services
    description: Service listing operations
  - name: Requests
    description: Service request operations
  - name: Notifications
    description: User notification operations
  - name: Advertisements
    description: Advertisement tracking operations
  - name: Rewards
    description: Reward system operations
